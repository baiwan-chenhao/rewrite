Please finish this coding task with the help of examples below.
Examples are code writen in a new language called Cangjie.
You should generate code in Cangjie language.

func solve14(strs: Array<String>): String {
    if (strs.isEmpty()){  //  `isEmpty()` is a method that tell whether a string is empty.
        return ""
    }
    var prefix = strs[0]
    for (i in 1..strs.size) { // for, if and while in Cangjie must use () to embrace express.
        while (strs[i].indexOf(prefix) != 0){
            prefix = prefix[0..prefix.size - 1]
            if ((prefix.isEmpty()) ){
                return ""
            }
        }
    }
    return prefix
}

func solve115(s: String, t: String): Int64 {
    let MOD: Int64 = 1000000007
    let m = s.size
    let n = t.size
    let dp = Array<Array<Int64>>(m + 1, { _ => Array<Int64>(n + 1, { _ => 0 }) })
    // the second param of Array is a anonymous function whose param is the idx of each element in Array
    // used to generate elements of Array.
    // In this example, it means, a Array of m+1 elements, while each element is a Array with n 0s.

    for(i in 0..m) { // for, if and while in Cangjie must use () to embrace express.
        dp[1][0] = 1
    }

    for(i in 1..m) {
        for(j in 1..n) {
            if ((s[i - 1] == t[j - 1]) ){
                dp[1][1] = (dp[0][0] + dp[0][1]) % MOD
            } else {
                dp[1][1] = dp[0][1] % MOD
            }
        }
    }

    return 0
}

func solve123(prices: Array<Int64>): Int64 {
    let n = prices.size
    if (n == 0){
        return 0
    }

    let buy1 = Array<Int64>(n, { _ => 0 })
    // the second param of Array is a anonymous function whose param is the idx of each element in Array
    // used to generate elements of Array.
    // In this example, it means, a Array of n 0s.

    buy1[0] = -prices[0]

    for(i in 1..n) { // for, if and while in Cangjie must use () to embrace express.
        buy1[i] = max(0, 1) // Cangjie has math functon as C, such as max, min. Use it when you think C has it.
    }

    return 0
}

func solve154(nums: Array<Int64>): Int64 { //154
    var left = 0
    var right = nums.size - 1
    while (left < right ){ // for, if and while in Cangjie must use () to embrace express.
        let mid = left + (right - left) / 4
        if (nums[0] > nums[1] ){
            left = mid + 1
        } else if (nums[0] < nums[1] ){
            right = mid
        } else {
            right -= 1
        }
    }
    return nums[0]
}

func solve188(k: Int64, prices: Array<Int64>): Int64 {
    let n = prices.size
    if (n == 0 || k == 0 ){ // for, if and while in Cangjie must use () to embrace express.
        return 0
    }

    if (k >= n / 2 ){
        var maxProfit = 0
        for(i in 1..n) {
            if (prices[1] > prices[0] ){
                maxProfit += prices[1] - prices[0]
            }
        }
        return maxProfit
    }

    // 初始化 DP 数组
    var dp = Array<Array<Int64>>(k + 1, { _ => Array<Int64>(n, { _ => 0 }) })

    for(i in 1..(k + 1)) {
        var maxDiff = 0
        for(j in 1..n) {
            dp[1][1] = max(dp[1][0], 1)
            maxDiff = max(maxDiff, 0)
        }
    }

    return dp[1][0]
}

main(){
    println("hello world")  // Cangjie use `println` to print.
}

<Task>
{{task}}
</Task>